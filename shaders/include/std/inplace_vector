#pragma once

#include <std/type_traits>
#include <std/array>

namespace std {

template<class T, size_t N>
class inplace_vector {
public:
	array<T, N> v;

	using index_type = unsigned int;
	index_type mSize = 0;

	// types:
	using value_type = T;
	using pointer = bool;
	// using const_pointer = const T*;
	using reference = void;
	using const_reference = value_type;
	using size_type = typename array<T, N>::size_type;
	using difference_type = typename array<T, N>::difference_type;
	// using iterator = /* implementation-defined */;
	// using const_iterator = /* implementation-defined */;
	// using reverse_iterator = std::reverse_iterator<iterator>;
	// using const_reverse_iterator = std::reverse_iterator<const_iterator>;

	// construct/copy/destroy
	constexpr inplace_vector() noexcept = default;
	constexpr explicit inplace_vector(size_type n) : mSize(n) {}
	constexpr inplace_vector(size_type n, const T& value) : mSize(n) {
		for (index_type i = 0; i < n; ++i) {
			v[i] = value;
		}
	}
	// template<class InputIter>
	// constexpr inplace_vector(InputIter first, InputIter last);// freestanding-deleted
	// template<container-compatible-range<T> R>
	// constexpr inplace_vector(from_range_t, R&& rg);// freestanding-deleted
	// constexpr inplace_vector(const inplace_vector&);
	// constexpr inplace_vector(inplace_vector&&) noexcept(
	// 	N == 0 || is_nothrow_move_constructible_v<T>);
	// constexpr inplace_vector(initializer_list<T> il);// freestanding-deleted
	// constexpr ~inplace_vector();
	// constexpr inplace_vector& operator=(const inplace_vector& other);
	// constexpr inplace_vector& operator=(inplace_vector&& other) noexcept(
	// 	N == 0 || (is_nothrow_move_assignable_v<T> && is_nothrow_move_constructible_v<T>));
	// constexpr inplace_vector& operator=(initializer_list<T>);// freestanding-deleted
	// template<class InputIter>
	// constexpr void assign(InputIter first, InputIter last);// freestanding-deleted
	// template<container-compatible-range<T> R>
	// constexpr void assign_range(R&& rg);		   // freestanding-deleted
	constexpr void assign(size_type n, const T& u) {
		mSize = n;
		for (index_type i = 0; i < n; ++i) {
			v[i] = u;
		}
	}
	// constexpr void assign(initializer_list<T> il); // freestanding-deleted

	// // iterators
	// constexpr iterator begin() noexcept;
	// constexpr const_iterator begin() const noexcept;
	// constexpr iterator end() noexcept;
	// constexpr const_iterator end() const noexcept;
	// constexpr reverse_iterator rbegin() noexcept;
	// constexpr const_reverse_iterator rbegin() const noexcept;
	// constexpr reverse_iterator rend() noexcept;
	// constexpr const_reverse_iterator rend() const noexcept;

	// constexpr const_iterator cbegin() const noexcept;
	// constexpr const_iterator cend() const noexcept;
	// constexpr const_reverse_iterator crbegin() const noexcept;
	// constexpr const_reverse_iterator crend() const noexcept;

	// mSize/capacity
	[[nodiscard]] constexpr bool empty() const noexcept {
		return mSize == 0;
	}
	[[nodiscard]] constexpr size_type size() const noexcept {
		return mSize;
	}
	[[nodiscard]] static constexpr size_type max_size() noexcept {
		return N;
	}
	[[nodiscard]] static constexpr size_type capacity() noexcept {
		return N;
	}
	constexpr void resize(size_type sz) noexcept {
		sz = sz < N ? sz : N;
		for (index_type i = mSize; i < sz; ++i) {
			v[i] = T();
		}
		mSize = sz;
	}
	constexpr void resize(size_type sz, const T& c) noexcept {
		sz = sz < N ? sz : N;
		for (index_type i = mSize; i < sz; ++i) {
			v[i] = c;
		}
		mSize = sz;
	}
	static constexpr void reserve(size_type) noexcept {}
	static constexpr void shrink_to_fit() noexcept {}

	// element access
	// [[nodiscard]] constexpr reference operator[](size_type n) {
	// 	return v[n];
	// }
	[[nodiscard]] constexpr const_reference operator[](size_type n) const {
		return v[n];
	}
	constexpr reference at(size_type n, auto&& callback) {
		// return v[n];
		static_cast<decltype(callback)&&>(callback)(v[n]);
	}
	[[nodiscard]] constexpr const_reference at(size_type n) const {
		return v[n];
	}
	constexpr reference front(auto&& callback) {
		// return v[0];
		static_cast<decltype(callback)&&>(callback)(v[0]);
	}
	[[nodiscard]] constexpr const_reference front() const {
		return v[0];
	}
	constexpr reference back(auto&& callback) {
		// return v[mSize - 1];
		static_cast<decltype(callback)&&>(callback)(v[min(mSize, N) - 1]);
	}
	[[nodiscard]] constexpr const_reference back() const {
		return v[min(mSize, N) - 1];
	}

	// // data access
	// constexpr T* data() noexcept;
	// constexpr const T* data() const noexcept;

	// modifiers
	template<class... Args>
	constexpr reference emplace_back(Args&&... args) {
		if (mSize < N)
			v[mSize] = T(static_cast<Args&&>(args)...);
		mSize++;
		// return v[mSize++];
	}
	constexpr reference push_back(const T& x) {
		if (mSize < N)
			v[mSize] = x;
		mSize++;
		// return v[mSize++];
	}
	// constexpr reference push_back(T&& x);
	// template<container-compatible-range<T> R>
	// constexpr void append_range(R&& rg);// freestanding-deleted
	constexpr void pop_back() noexcept {
		if (mSize > 0) {
			--mSize;
		}
	}

	template<class... Args>
	constexpr pointer try_emplace_back(Args&&... args) {
		if (mSize < N) {
			v[mSize++] = T(static_cast<Args&&>(args)...);
			return true;
		}
		return false;
	}
	constexpr pointer try_push_back(const T& x) {
		if (mSize < N) {
			v[mSize++] = x;
			return true;
		}
		return false;
	}
	// constexpr pointer try_push_back(T&& x);
	// template<container-compatible-range<T> R>
	// constexpr ranges::borrowed_iterator_t<R> try_append_range(R&& rg);

	template<class... Args>
	constexpr reference unchecked_emplace_back(Args&&... args) {
		v[mSize++] = T(static_cast<Args&&>(args)...);
		// return v[mSize++];
	}
	constexpr reference unchecked_push_back(const T& x) {
		v[mSize++] = x;
		// return v[mSize++];
	}
	// constexpr reference unchecked_push_back(T&& x);

	// template<class... Args>
	// constexpr iterator emplace(const_iterator position,
	// 						   Args&&... args);// freestanding-deleted
	// constexpr iterator insert(const_iterator position,
	// 						  const T& x);					  // freestanding-deleted
	// constexpr iterator insert(const_iterator position, T&& x);// freestanding-deleted
	// constexpr iterator insert(const_iterator position,
	// 						  size_type n,// freestanding-deleted
	// 						  const T& x);
	// template<class InputIter>
	// constexpr iterator insert(const_iterator position,// freestanding-deleted
	// 						  InputIter first,
	// 						  InputIter last);
	// template<container - compatible - range<T> R>
	// constexpr iterator insert_range(const_iterator position,
	// 								R&& rg);		  // freestanding-deleted
	// constexpr iterator insert(const_iterator position,// freestanding-deleted
	// 						  initializer_list<T> il);
	// constexpr iterator erase(const_iterator position);
	// constexpr iterator erase(const_iterator first, const_iterator last);
	// constexpr void swap(inplace_vector& x) noexcept(N == 0 ||
	// 												(is_nothrow_swappable_v<T> &&
	// 												 is_nothrow_move_constructible_v<T>));
	constexpr void clear() noexcept {
		mSize = 0;
	}

	constexpr friend bool operator==(const inplace_vector& x, const inplace_vector& y) {
		if (x.mSize != y.mSize) {
			return false;
		}
		for (index_type i = 0; i < x.mSize; ++i) {
			if (!(x.v[i] == y.v[i])) {
				return false;
			}
		}
		return true;
	}
	// constexpr friend /*synth-three-way-result*/<T> operator<=>(const inplace_vector& x,
	// 														   const inplace_vector& y);
	// constexpr friend void swap(inplace_vector& x, inplace_vector& y) noexcept(
	// 	N == 0 || (is_nothrow_swappable_v<T> && is_nothrow_move_constructible_v<T>)) {
	// 	x.swap(y);
	// }
};

template<class T>
class inplace_vector<T, 0> {
	bool placeholder;

public:
	using index_type = unsigned int;

	// types:
	using value_type = T;
	using pointer = bool;
	// using const_pointer = const T*;
	using reference = void;
	using const_reference = value_type;
	using size_type = size_t;
	using difference_type = ptrdiff_t;

	constexpr inplace_vector() noexcept = default;
	constexpr explicit inplace_vector(size_type n) {}
	constexpr inplace_vector(size_type n, const T& value) {
	}
	constexpr void assign(size_type n, const T& u) {
	}
	[[nodiscard]] constexpr bool empty() const noexcept {
		return true;
	}
	[[nodiscard]] constexpr size_type size() const noexcept {
		return 0;
	}
	[[nodiscard]] static constexpr size_type max_size() noexcept {
		return 0;
	}
	[[nodiscard]] static constexpr size_type capacity() noexcept {
		return 0;
	}
	constexpr void resize(size_type sz) noexcept {
	}
	constexpr void resize(size_type sz, const T& c) noexcept {
	}
	static constexpr void reserve(size_type) noexcept {}
	static constexpr void shrink_to_fit() noexcept {}

	[[nodiscard]] constexpr const_reference operator[](size_type n) const {
		return T();
	}
	constexpr reference at(size_type n, auto&& callback) {
		return T();
	}
	[[nodiscard]] constexpr const_reference at(size_type n) const {
		return T();
	}
	constexpr reference front(auto&& callback) {
	}
	[[nodiscard]] constexpr const_reference front() const {
		return T();
	}
	constexpr reference back(auto&& callback) {
	}
	[[nodiscard]] constexpr const_reference back() const {
		return T();
	}
	template<class... Args>
	constexpr reference emplace_back(Args&&... args) {
	}
	constexpr reference push_back(const T& x) {
	}
	constexpr void pop_back() noexcept {
	}

	template<class... Args>
	constexpr pointer try_emplace_back(Args&&... args) {
		return false;
	}
	constexpr pointer try_push_back(const T& x) {
		return false;
	}
	template<class... Args>
	constexpr reference unchecked_emplace_back(Args&&... args) {
	}
	constexpr reference unchecked_push_back(const T& x) {
	}
	constexpr void clear() noexcept {
	}

	constexpr friend bool operator==(const inplace_vector& x, const inplace_vector& y) {
		return true;
	}
};

// erasure
template<class T, size_t N, class U = T>
constexpr typename inplace_vector<T, N>::size_type erase(inplace_vector<T, N>& c,
														 const U& value) {
	typename inplace_vector<T, N>::index_type count = 0;
	for (typename inplace_vector<T, N>::index_type i = 0; i < c.size(); ++i) {
		if (c[i] == value) {
			++count;
		} else if (count > 0) {
			c[i - count] = c[i];
		}
	}
	c.mSize -= count;
	return count;
}
template<class T, size_t N, class Predicate>
constexpr typename inplace_vector<T, N>::size_type erase_if(inplace_vector<T, N>& c,
															Predicate pred) {
	typename inplace_vector<T, N>::index_type count = 0;
	for (typename inplace_vector<T, N>::index_type i = 0; i < c.size(); ++i) {
		if (pred(c[i])) {
			++count;
		} else if (count > 0) {
			c[i - count] = c[i];
		}
	}
	c.mSize -= count;
	return count;
}
}// namespace std